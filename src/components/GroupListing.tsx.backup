import React, { useState, useEffect } from 'react';
import { getAllParticipants, getGroups, getPaymentsByParticipant } from '../utils/firestore';
import { Participant, Group } from '../types';
import LoadingSpinner from './LoadingSpinner';
import { Users, ArrowLeft, Calendar } from 'lucide-react';

interface GroupListingProps {
  onParticipantSelected: (participant: { id: string; name: string; groupId: string }) => void;
  onBack: () => void;
}

interface PaymentStatus {
  isPaid: boolean;
  monthsOverdue: number;
}

interface ParticipantWithProgress extends Participant {
  paymentProgress: PaymentStatus[];
}

export const GroupListing: React.FC<GroupListingProps> = ({ onParticipantSelected, onBack }) => {
  const [participants, setParticipants] = useState<ParticipantWithProgress[]>([]);
  const [groups, setGroups] = useState<Group[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);

  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth < 768);
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        setError(null);
        console.log('üîÑ Starting data fetch from Firebase...');
        
        console.log('üìä Fetching participants and groups...');
        const [participantsData, groupsData] = await Promise.all([
          getAllParticipants(),
          getGroups()
        ]);
        
        console.log(`‚úÖ Found ${participantsData.length} participants and ${groupsData.length} groups`);
        
        // Add payment progress for each participant with MONTH-SPECIFIC LOGIC
        console.log('üí∞ Fetching payment data for each participant...');
        const participantsWithProgress = await Promise.all(
          participantsData.map(async (participant) => {
            const payments = await getPaymentsByParticipant(participant.id);
            console.log(`üí≥ ${participant.name}: ${payments.length} payments found`);
            
            // MONTH-SPECIFIC LOGIC: Map actual months paid to indicators with overdue tracking
            const months = ['2025-08', '2025-09', '2025-10', '2025-11', '2025-12', '2026-01', '2026-02', '2026-03'];
            const currentDate = new Date();
            const currentMonth = currentDate.getFullYear() + '-' + String(currentDate.getMonth() + 1).padStart(2, '0');
            
            const paymentProgress = months.map(month => {
              const payment = payments.find(p => p.month === month);
              
              if (payment && payment.isPaid) {
                return { isPaid: true, monthsOverdue: 0 };
              }
              
              // Calculate months overdue for unpaid months that have passed
              const monthDate = new Date(month + '-01');
              const currentMonthDate = new Date(currentMonth + '-01');
              
              if (monthDate <= currentMonthDate) {
                const monthsDiff = (currentMonthDate.getFullYear() - monthDate.getFullYear()) * 12 + 
                                 (currentMonthDate.getMonth() - monthDate.getMonth());
                return { isPaid: false, monthsOverdue: monthsDiff };
              }
              
              // Future months are not overdue
              return { isPaid: false, monthsOverdue: 0 };
            });
            
            const paidCount = paymentProgress.filter(p => p.isPaid).length;
            const overdueCount = paymentProgress.filter(p => !p.isPaid && p.monthsOverdue > 0).length;
            console.log(`üìà ${participant.name}: ${paidCount} months paid, ${overdueCount} months overdue`);
            
            return { ...participant, paymentProgress };
          })
        );
        
        setParticipants(participantsWithProgress);
        setGroups(groupsData);
        console.log('üéâ Successfully loaded Firebase data with sequential progress!');
        
      } catch (error) {
        console.error('‚ùå Firebase fetch failed:', error);
        setError(`Database connection failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const getParticipantsByGroup = (groupId: string) => {
    return participants.filter(participant => participant.groupId === groupId);
  };

  const renderPaymentIndicator = (paymentProgress: PaymentStatus[]) => {
    const months = ['Ogo', 'Sep', 'Okt', 'Nov', 'Dis', 'Jan', 'Feb', 'Mac'];
    
    const getIndicatorColor = (status: PaymentStatus) => {
      if (status.isPaid) return '#16a34a'; // Green - paid
      if (status.monthsOverdue >= 2) return '#dc2626'; // Red - 2+ months overdue
      if (status.monthsOverdue === 1) return '#f59e0b'; // Yellow/amber - 1 month overdue
      return '#e5e7eb'; // Gray - not due yet or current month
    };
    
    const getStatusText = (status: PaymentStatus, monthName: string) => {
      if (status.isPaid) return `${monthName}: Sudah Bayar ‚úì`;
      if (status.monthsOverdue >= 2) return `${monthName}: Terlepas ${status.monthsOverdue} bulan! ‚ö†Ô∏è`;
      if (status.monthsOverdue === 1) return `${monthName}: Terlepas 1 bulan ‚ö†Ô∏è`;
      return `${monthName}: Belum Bayar ‚úó`;
    };
    
    return (
      <div style={{
        display: 'flex',
        gap: '4px',
        marginTop: '0.75rem',
        padding: '0.5rem',
        backgroundColor: '#f8fafc',
        borderRadius: '8px',
        border: '1px solid #e2e8f0'
      }}>
        {paymentProgress.map((status, index) => (
          <div
            key={index}
            style={{
              width: '24px',
              height: '8px',
              backgroundColor: getIndicatorColor(status),
              borderRadius: '4px',
              transition: 'all 0.3s ease',
              cursor: 'help',
              position: 'relative',
              boxShadow: status.isPaid ? '0 2px 4px rgba(22, 163, 74, 0.2)' : 
                        status.monthsOverdue >= 2 ? '0 2px 4px rgba(220, 38, 38, 0.2)' :
                        status.monthsOverdue === 1 ? '0 2px 4px rgba(245, 158, 11, 0.2)' : 'none',
              transform: 'scale(1)'
            }}
            title={getStatusText(status, months[index])}
            onMouseEnter={(e) => {
              e.currentTarget.style.transform = 'scale(1.1)';
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.transform = 'scale(1)';
            }}
          >
            {/* Month label below indicator */}
            <div style={{
              position: 'absolute',
              top: '10px',
              left: '50%',
              transform: 'translateX(-50%)',
              fontSize: '0.6rem',
              color: '#64748b',
              fontWeight: '500',
              whiteSpace: 'nowrap'
            }}>
              {months[index]}
            </div>
          </div>
        ))}
      </div>
    );
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 flex items-center justify-center">
        <LoadingSpinner />
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-red-50 to-orange-50 flex items-center justify-center">
        <div className="text-center p-8 bg-white rounded-lg shadow-lg max-w-md">
          <h2 style={{ 
            fontSize: '1.25rem', 
            fontWeight: 'bold', 
            color: '#dc2626', 
            marginBottom: '1rem',
            fontFamily: "'Inter', sans-serif"
          }}>Database Connection Error</h2>
          <p style={{ 
            color: '#374151', 
            marginBottom: '1rem',
            fontFamily: "'Inter', sans-serif"
          }}>{error}</p>
          <button
            onClick={() => window.location.reload()}
            style={{
              backgroundColor: '#dc2626',
              color: 'white',
              padding: '0.5rem 1rem',
              borderRadius: '0.375rem',
              border: 'none',
              cursor: 'pointer',
              fontFamily: "'Inter', sans-serif",
              fontWeight: '500'
            }}
            onMouseEnter={(e) => {
              e.currentTarget.style.backgroundColor = '#b91c1c';
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.backgroundColor = '#dc2626';
            }}
          >
            Retry Connection
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen" style={{ 
      background: 'linear-gradient(135deg, #f0fdf4 0%, #eff6ff 100%)' 
    }}>
      {/* Header */}
      <header style={{
        backgroundColor: 'white',
        boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
        borderBottom: '1px solid #e5e7eb'
      }}>
        <div className="container mx-auto" style={{ padding: '1.5rem 1rem' }}>
          <div style={{ 
            display: 'flex', 
            alignItems: 'center', 
            justifyContent: 'space-between',
            flexWrap: 'wrap',
            gap: '1rem'
          }}>
            <button
              onClick={onBack}
              style={{
                display: 'flex',
                alignItems: 'center',
                color: '#16a34a',
                backgroundColor: 'transparent',
                border: 'none',
                cursor: 'pointer',
                fontSize: '1rem',
                fontFamily: "'Inter', sans-serif",
                transition: 'color 0.2s',
                padding: '0.5rem'
              }}
            >
              <ArrowLeft size={20} style={{ marginRight: '0.5rem' }} />
              <span>Kembali ke Portal</span>
            </button>
            <div style={{ 
              textAlign: 'center', 
              flex: 1,
              minWidth: '300px'
            }}>
              <h1 style={{
                fontSize: 'clamp(1.5rem, 4vw, 2rem)',
                fontWeight: 'bold',
                color: '#166534',
                marginBottom: '0.25rem',
                fontFamily: "'Inter', sans-serif"
              }}>
                Senarai Kumpulan
              </h1>
              <p style={{
                color: '#16a34a',
                fontSize: 'clamp(0.9rem, 3vw, 1rem)',
                fontFamily: "'Inter', sans-serif"
              }}>
                Status pembayaran mengikut bulan sebenar
              </p>
            </div>
            <div style={{ width: '120px' }}></div>
          </div>
        </div>
      </header>

      {/* Groups Section */}
      <div className="container mx-auto" style={{ 
        maxWidth: '1200px',
        padding: '2rem 1rem'
      }}>
        {/* Live Data Indicator */}
        <div style={{
          backgroundColor: '#d1fae5',
          borderRadius: '8px',
          padding: '1rem',
          marginBottom: '1rem',
          border: '1px solid #10b981',
          textAlign: 'center'
        }}>
          <p style={{
            fontSize: '0.875rem',
            color: '#065f46',
            fontFamily: "'Inter', sans-serif",
            margin: 0
          }}>
            üéâ <strong>Live Database</strong> - Real-time payment indicators from Firebase
          </p>
        </div>

        {/* Legend */}
        <div style={{
          backgroundColor: '#f8fafc',
          borderRadius: '12px',
          padding: 'clamp(1rem, 4vw, 1.25rem)',
          marginBottom: '1.5rem',
          border: '1px solid #e2e8f0',
          boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)'
        }}>
          <h3 style={{
            fontWeight: '600',
            color: '#1e40af',
            marginBottom: '1rem',
            fontSize: '1.125rem',
            fontFamily: "'Inter', sans-serif",
            display: 'flex',
            alignItems: 'center'
          }}>
            <Calendar size={20} style={{ marginRight: '0.5rem' }} />
            Monthly Payment Progress
          </h3>
          <div style={{ 
            display: 'flex', 
            flexDirection: 'column',
            gap: '1.5rem'
          }}>
            {/* Example Progress Bar */}
            <div style={{ 
              display: 'flex', 
              alignItems: 'center', 
              gap: '1rem',
              flexWrap: 'wrap',
              justifyContent: isMobile ? 'center' : 'flex-start'
            }}>
              <div style={{
                display: 'flex',
                gap: '3px',
                padding: '0.5rem',
                backgroundColor: 'white',
                borderRadius: '8px',
                border: '1px solid #e2e8f0'
              }}>
                {['Ogo', 'Sep', 'Okt', 'Nov', 'Dis', 'Jan', 'Feb', 'Mac'].map((month, i) => {
                  let color = '#e5e7eb'; // Default gray
                  if (i === 0) color = '#16a34a'; // Green - paid
                  if (i === 1) color = '#f59e0b'; // Yellow - 1 month overdue
                  if (i === 2) color = '#dc2626'; // Red - 2+ months overdue
                  
                  return (
                    <div key={i} style={{ position: 'relative' }}>
                      <div
                        style={{
                          width: '24px',
                          height: '8px',
                          backgroundColor: color,
                          borderRadius: '4px',
                          boxShadow: i <= 2 ? '0 2px 4px rgba(0, 0, 0, 0.1)' : 'none'
                        }}
                        title={month}
                      />
                      <div style={{
                        position: 'absolute',
                        top: '12px',
                        left: '50%',
                        transform: 'translateX(-50%)',
                        fontSize: '0.6rem',
                        color: '#64748b',
                        fontWeight: '500'
                      }}>
                        {month}
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
            
            {/* Status Legend */}
            <div style={{ 
              display: 'grid',
              gridTemplateColumns: isMobile ? '1fr 1fr' : 'repeat(auto-fit, minmax(140px, 1fr))',
              gap: 'clamp(0.75rem, 3vw, 1rem)',
              width: '100%'
            }}>
              <div style={{ 
                display: 'flex', 
                alignItems: 'center', 
                gap: '0.375rem',
                padding: 'clamp(0.375rem, 2vw, 0.5rem) clamp(0.5rem, 3vw, 0.75rem)',
                backgroundColor: 'white',
                borderRadius: '6px',
                border: '1px solid #e2e8f0',
                minHeight: '44px',
                justifyContent: 'flex-start'
              }}>
                <div style={{ 
                  width: 'clamp(10px, 3vw, 12px)', 
                  height: 'clamp(3px, 1vw, 4px)', 
                  backgroundColor: '#16a34a', 
                  borderRadius: '2px',
                  flexShrink: 0
                }} />
                <span style={{ 
                  fontSize: 'clamp(0.65rem, 2.5vw, 0.75rem)', 
                  color: '#374151',
                  fontWeight: '500',
                  fontFamily: "'Inter', sans-serif",
                  whiteSpace: 'nowrap'
                }}>Sudah Bayar</span>
              </div>
              <div style={{ 
                display: 'flex', 
                alignItems: 'center', 
                gap: '0.375rem',
                padding: 'clamp(0.375rem, 2vw, 0.5rem) clamp(0.5rem, 3vw, 0.75rem)',
                backgroundColor: 'white',
                borderRadius: '6px',
                border: '1px solid #e2e8f0',
                minHeight: '44px',
                justifyContent: 'flex-start'
              }}>
                <div style={{ 
                  width: 'clamp(10px, 3vw, 12px)', 
                  height: 'clamp(3px, 1vw, 4px)', 
                  backgroundColor: '#f59e0b', 
                  borderRadius: '2px',
                  flexShrink: 0
                }} />
                <span style={{ 
                  fontSize: 'clamp(0.65rem, 2.5vw, 0.75rem)', 
                  color: '#374151',
                  fontWeight: '500',
                  fontFamily: "'Inter', sans-serif",
                  whiteSpace: 'nowrap'
                }}>Terlepas 1 Bulan</span>
              </div>
              <div style={{ 
                display: 'flex', 
                alignItems: 'center', 
                gap: '0.375rem',
                padding: 'clamp(0.375rem, 2vw, 0.5rem) clamp(0.5rem, 3vw, 0.75rem)',
                backgroundColor: 'white',
                borderRadius: '6px',
                border: '1px solid #e2e8f0',
                minHeight: '44px',
                justifyContent: 'flex-start'
              }}>
                <div style={{ 
                  width: 'clamp(10px, 3vw, 12px)', 
                  height: 'clamp(3px, 1vw, 4px)', 
                  backgroundColor: '#dc2626', 
                  borderRadius: '2px',
                  flexShrink: 0
                }} />
                <span style={{ 
                  fontSize: 'clamp(0.65rem, 2.5vw, 0.75rem)', 
                  color: '#374151',
                  fontWeight: '500',
                  fontFamily: "'Inter', sans-serif",
                  whiteSpace: 'nowrap'
                }}>Terlepas 2+ Bulan</span>
              </div>
              <div style={{ 
                display: 'flex', 
                alignItems: 'center', 
                gap: '0.375rem',
                padding: 'clamp(0.375rem, 2vw, 0.5rem) clamp(0.5rem, 3vw, 0.75rem)',
                backgroundColor: 'white',
                borderRadius: '6px',
                border: '1px solid #e2e8f0',
                minHeight: '44px',
                justifyContent: 'flex-start'
              }}>
                <div style={{ 
                  width: 'clamp(10px, 3vw, 12px)', 
                  height: 'clamp(3px, 1vw, 4px)', 
                  backgroundColor: '#e5e7eb', 
                  borderRadius: '2px',
                  flexShrink: 0
                }} />
                <span style={{ 
                  fontSize: 'clamp(0.65rem, 2.5vw, 0.75rem)', 
                  color: '#374151',
                  fontWeight: '500',
                  fontFamily: "'Inter', sans-serif",
                  whiteSpace: 'nowrap'
                }}>Belum Bayar</span>
              </div>
            </div>
          </div>
            </div>
            
            {/* Info Text */}
            <div style={{
              marginTop: '1rem',
              padding: '0.75rem',
              backgroundColor: 'rgba(59, 130, 246, 0.05)',
              borderRadius: '8px',
              border: '1px solid rgba(59, 130, 246, 0.1)',
              textAlign: 'center'
            }}>
              <p style={{
                fontSize: 'clamp(0.7rem, 2.5vw, 0.8rem)',
                color: '#475569',
                margin: 0,
                fontStyle: 'italic',
                fontFamily: "'Inter', sans-serif"
              }}>
                üí° Indicator warna berdasarkan status pembayaran dan tahap keutamaan
              </p>
            </div>
          </div>
        </div>

        {/* Groups Grid */}
        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
          gap: '1.5rem'
        }}>
          {groups
            .sort((a, b) => {
              const getGroupNumber = (groupName: string) => {
                const match = groupName.match(/(\d+)/);
                return match ? parseInt(match[1]) : 999;
              };
              
              const numA = getGroupNumber(a.name);
              const numB = getGroupNumber(b.name);
              
              if (numA !== numB) {
                return numA - numB;
              }
              
              return a.name.localeCompare(b.name);
            })
            .map(group => {
            const groupParticipants = getParticipantsByGroup(group.id)
              .sort((a, b) => a.name.localeCompare(b.name));
            
            const totalParticipants = groupParticipants.length;
            const totalMonthsPossible = totalParticipants * 8;
            const completedMonths = groupParticipants.reduce((acc, p) => 
              acc + p.paymentProgress.filter(status => status.isPaid).length, 0
            );
            const groupCompletionRate = totalMonthsPossible > 0 
              ? Math.round((completedMonths / totalMonthsPossible) * 100) 
              : 0;
            
            return (
              <div
                key={group.id}
                style={{
                  backgroundColor: 'white',
                  borderRadius: '12px',
                  boxShadow: '0 10px 25px rgba(0, 0, 0, 0.1)',
                  padding: '1.5rem',
                  border: '1px solid #e5e7eb',
                  transition: 'transform 0.2s, box-shadow 0.2s'
                }}
              >
                {/* Group Header */}
                <div style={{
                  borderBottom: '2px solid #f3f4f6',
                  paddingBottom: '1rem',
                  marginBottom: '1.5rem'
                }}>
                  <div style={{ 
                    display: 'flex', 
                    justifyContent: 'space-between', 
                    alignItems: 'flex-start',
                    marginBottom: '0.5rem'
                  }}>
                    <h3 style={{
                      fontSize: '1.25rem',
                      fontWeight: 'bold',
                      color: '#1f2937',
                      margin: 0,
                      fontFamily: "'Inter', sans-serif",
                      display: 'flex',
                      alignItems: 'center'
                    }}>
                      <Users size={20} style={{ marginRight: '0.5rem', color: '#16a34a' }} />
                      {group.name}
                    </h3>
                    <div style={{
                      backgroundColor: groupCompletionRate >= 75 ? '#dcfce7' : 
                                      groupCompletionRate >= 50 ? '#fef3c7' : '#fee2e2',
                      color: groupCompletionRate >= 75 ? '#166534' : 
                             groupCompletionRate >= 50 ? '#92400e' : '#991b1b',
                      padding: '0.25rem 0.5rem',
                      borderRadius: '9999px',
                      fontSize: '0.75rem',
                      fontWeight: '600'
                    }}>
                      {groupCompletionRate}%
                    </div>
                  </div>
                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <p style={{
                      fontSize: '0.875rem',
                      color: '#6b7280',
                      fontFamily: "'Inter', sans-serif",
                      margin: 0
                    }}>
                      {totalParticipants} peserta
                    </p>
                    <p style={{
                      fontSize: '0.75rem',
                      color: '#9ca3af',
                      fontFamily: "'Inter', sans-serif",
                      margin: 0
                    }}>
                      {completedMonths}/{totalMonthsPossible} bulan selesai
                    </p>
                  </div>
                </div>

                {/* Participants List */}
                <div style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>
                  {groupParticipants.length === 0 ? (
                    <p style={{
                      textAlign: 'center',
                      color: '#9ca3af',
                      fontStyle: 'italic',
                      padding: '2rem 0',
                      fontFamily: "'Inter', sans-serif"
                    }}>
                      Tiada peserta dalam kumpulan ini
                    </p>
                  ) : (
                    groupParticipants.map(participant => {
                      const completedPayments = participant.paymentProgress.filter(p => p.isPaid).length;
                      const completionRate = Math.round((completedPayments / 8) * 100);
                      
                      return (
                        <button
                          key={participant.id}
                          onClick={() => onParticipantSelected({
                            id: participant.id,
                            name: participant.name,
                            groupId: participant.groupId
                          })}
                          style={{
                            textAlign: 'left',
                            padding: '1.25rem',
                            border: '1px solid #e2e8f0',
                            borderRadius: '12px',
                            backgroundColor: 'white',
                            cursor: 'pointer',
                            transition: 'all 0.3s ease',
                            fontFamily: "'Inter', sans-serif",
                            boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)'
                          }}
                          onMouseEnter={(e) => {
                            e.currentTarget.style.transform = 'translateY(-2px)';
                            e.currentTarget.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.15)';
                          }}
                          onMouseLeave={(e) => {
                            e.currentTarget.style.transform = 'translateY(0)';
                            e.currentTarget.style.boxShadow = '0 1px 3px rgba(0, 0, 0, 0.1)';
                          }}
                        >
                          <div>
                            <div style={{ 
                              display: 'flex', 
                              justifyContent: 'space-between', 
                              alignItems: 'center',
                              marginBottom: '0.25rem'
                            }}>
                              <h4 style={{
                                fontWeight: '600',
                                color: '#1f2937',
                                margin: 0,
                                fontSize: '1rem',
                                letterSpacing: '-0.025em'
                              }}>
                                {participant.name}
                              </h4>
                              <div style={{
                                fontSize: '0.75rem',
                                color: 'white',
                                fontWeight: '600',
                                backgroundColor: completionRate >= 75 ? '#16a34a' : 
                                               completionRate >= 50 ? '#f59e0b' : '#dc2626',
                                padding: '0.25rem 0.5rem',
                                borderRadius: '12px',
                                minWidth: '2rem',
                                textAlign: 'center'
                              }}>
                                {completionRate}%
                              </div>
                            </div>
                            {renderPaymentIndicator(participant.paymentProgress)}
                            <div style={{
                              display: 'flex',
                              justifyContent: 'space-between',
                              alignItems: 'center',
                              marginTop: '0.75rem'
                            }}>
                              <p style={{
                                fontSize: '0.8rem',
                                color: '#64748b',
                                margin: 0,
                                fontWeight: '500'
                              }}>
                                {completedPayments}/8 bulan selesai
                              </p>
                              <div style={{
                                fontSize: '0.7rem',
                                color: '#94a3b8',
                                fontStyle: 'italic'
                              }}>
                                Klik untuk detail
                              </div>
                            </div>
                          </div>
                        </button>
                      );
                    })
                  )}
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
};
